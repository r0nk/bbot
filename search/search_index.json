{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>A BBOT scan in real-time - visualization with VivaGraphJS</p>"},{"location":"#installation","title":"Installation","text":"<p>Supported Platforms</p> <p>Only Linux is supported at this time. Windows and macOS are not supported. If you use one of these platforms, consider using Docker.</p> <p>BBOT offers multiple methods of installation, including pipx and Docker. If you plan to dev on BBOT, see Installation (Poetry).</p>"},{"location":"#python-pip-pipx","title":"Python (pip / pipx)","text":"Note <p><code>pipx</code> installs BBOT inside its own virtual environment.</p> <pre><code># stable version\npipx install bbot\n\n# bleeding edge (dev branch)\npipx install --pip-args '\\--pre' bbot\n\n# execute bbot command\nbbot --help\n</code></pre>"},{"location":"#docker","title":"Docker","text":"<p>Docker images are provided, along with helper script <code>bbot-docker.sh</code> to persist your scan data.</p> <pre><code># bleeding edge (dev)\ndocker run -it blacklanternsecurity/bbot --help\n\n# stable\ndocker run -it blacklanternsecurity/bbot:stable --help\n\n# helper script\ngit clone https://github.com/blacklanternsecurity/bbot &amp;&amp; cd bbot\n./bbot-docker.sh --help\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Below are some common scan examples.</p> <p>Subdomains:</p> <pre><code># Perform a full subdomain enumeration on evilcorp.com\nbbot -t evilcorp.com -f subdomain-enum\n</code></pre> <p>Subdomains (passive only):</p> <pre><code># Perform a passive-only subdomain enumeration on evilcorp.com\nbbot -t evilcorp.com -f subdomain-enum -rf passive\n</code></pre> <p>Subdomains + port scan + web screenshots:</p> <pre><code># Port-scan every subdomain, screenshot every webpage, output to current directory\nbbot -t evilcorp.com -f subdomain-enum -m nmap gowitness -n my_scan -o .\n</code></pre> <p>Subdomains + basic web scan:</p> <pre><code># A basic web scan includes wappalyzer, robots.txt, and other non-intrusive web modules\nbbot -t evilcorp.com -f subdomain-enum web-basic\n</code></pre> <p>Web spider:</p> <pre><code># Crawl www.evilcorp.com up to a max depth of 2, automatically extracting emails, secrets, etc.\nbbot -t www.evilcorp.com -m httpx robots badsecrets secretsdb -c web_spider_distance=2 web_spider_depth=2\n</code></pre> <p>Everything everywhere all at once:</p> <pre><code># Subdomains, emails, cloud buckets, port scan, basic web, web screenshots, nuclei\nbbot -t evilcorp.com -f subdomain-enum email-enum cloud-enum web-basic -m nmap gowitness nuclei --allow-deadly\n</code></pre>"},{"location":"#api-keys","title":"API Keys","text":"<p>No API keys are required to run BBOT. However, some modules need them to function. If you have API keys and want to make use of these modules, you can place them either in BBOT's YAML config (<code>~/.config/bbot/secrets.yml</code>):</p> ~/.config/bbot/secrets.yml<pre><code>modules:\nshodan_dns:\napi_key: deadbeef\nvirustotal:\napi_key: cafebabe\n</code></pre> <p>Or on the command-line:</p> <pre><code># specify API key with -c\nbbot -t evilcorp.com -f subdomain-enum -c modules.shodan_dns.api_key=deadbeef modules.virustotal.api_key=cafebabe\n</code></pre> <p>For more information, see Configuration. For a full list of modules, including which ones require API keys, see List of Modules.</p> <p>Next Up: Scanning --&gt;</p>"},{"location":"comparison/","title":"Comparison to Other Tools","text":"<p>BBOT isn't exclusively a subdomain enumeration tool. However since there's so many of them, subdomain enumeration tools are the easiest class of tool to compare it to.</p> <p>Thanks to BBOT's recursive nature (and <code>massdns</code>' fancy subdomain mutations), it typically finds about 20-25% more than other tools such as <code>Amass</code> or <code>theHarvester</code>.</p> <p>This holds true even for larger targets like <code>boeing.com</code> (1000+ subdomains):</p> <p></p>"},{"location":"contribution/","title":"Contribution","text":"<p>We welcome contributions! If you have an idea for a new module, or are a Python developer who wants to get involved, please fork us or come talk to us on Discord.</p>"},{"location":"contribution/#setting-up-a-dev-environment","title":"Setting Up a Dev Environment","text":""},{"location":"contribution/#installation-poetry","title":"Installation (Poetry)","text":"<p>Poetry is the recommended method of installation if you want to dev on BBOT. To set up a dev environment with Poetry, you can follow these steps:</p> <ul> <li>Fork BBOT on GitHub</li> <li>Clone your fork and set up a development environment with Poetry:</li> </ul> <pre><code># clone your forked repo and cd into it\ngit clone git@github.com/&lt;username&gt;/bbot.git &amp;&amp; cd bbot\n\n# install poetry\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# install pip dependencies\npoetry install\n\n# enter virtual environment\npoetry shell\n\nbbot --help\n</code></pre> <ul> <li>Now, any changes you make in the code will be reflected in the <code>bbot</code> command.</li> <li>Run the tests locally to ensure they pass.</li> <li>Finally, commit and push your changes, and create a pull request to the <code>dev</code> branch of the main BBOT repo.</li> </ul>"},{"location":"contribution/#running-tests","title":"Running Tests","text":"<p>BBOT makes use of pytest for its unit testing. You can run the tests simply by executing the bash script at <code>bbot/test/run_tests.sh</code>:</p> <pre><code># auto-format code indentation, etc.\nblack .\n\n# run tests\n./bbot/test/run_tests.sh\n</code></pre>"},{"location":"contribution/#creating-a-module","title":"Creating a Module","text":"<p>Writing a module is easy and requires only a basic understanding of Python. It consists of a few steps:</p> <ol> <li>Create a new <code>.py</code> file in <code>bbot/modules</code></li> <li>At the top of the file, import <code>BaseModule</code></li> <li>Declare a class that inherits from <code>BaseModule</code></li> <li>the class must have the same name as your file (case-insensitive)</li> <li>Define in <code>watched_events</code> what type of data your module will consume</li> <li>Define in <code>produced_events</code> what type of data your module will produce</li> <li>Define (via <code>flags</code>) whether your module is <code>active</code> or <code>passive</code>, and whether it's <code>safe</code> or <code>aggressive</code></li> <li>Override <code>.handle_event()</code> (see <code>handle_event()</code> and <code>emit_event()</code>)</li> </ol> <p>Here is a simple example of a working module (<code>bbot/modules/mymodule.py</code>):</p> <pre><code>from bbot.modules.base import BaseModule\n\nclass MyModule(BaseModule):\n\"\"\"\n    Resolve DNS_NAMEs to IPs\n    \"\"\"\n    watched_events = [\"DNS_NAME\"]\n    produced_events = [\"IP_ADDRESS\"]\n    flags = [\"passive\", \"safe\"]\n\n    async def handle_event(self, event):\n        self.hugeinfo(f\"GOT EVENT: {event}\")\n        for ip in await self.helpers.resolve(event.data):\n            self.hugesuccess(f\"EMITTING IP_ADDRESS: {ip}\")\n            self.emit_event(ip, \"IP_ADDRESS\", source=event)\n</code></pre> <p>After saving the module, you can run it simply by specifying it with <code>-m</code>:</p> <pre><code># run a scan enabling the module in bbot/modules/mymodule.py\nbbot -t evilcorp.com -m mymodule\n</code></pre> <p>This will produce the output:</p> <pre><code>[SUCC] Starting scan satanic_linda\n[SCAN]                  satanic_linda (SCAN:2e9ec8b6f06875bcf7980eea4c150754b53a6049)  TARGET  (distance-0)\n[INFO] mymodule: GOT EVENT: DNS_NAME(\"dns.google\", module=TARGET, tags={'aaaa-record', 'ns-record', 'target', 'domain', 'a-record', 'resolved', 'txt-record', 'soa-record', 'distance-0', 'in-scope'})\n[DNS_NAME]              dns.google  TARGET  (a-record, aaaa-record, distance-0, domain, in-scope, ns-record, resolved, soa-record, target, txt-record)\n[INFO] Finishing scan\n</code></pre> <p>But something's wrong! We're emitting <code>IP_ADDRESS</code> events, but they're not showing up in the output. This is because by default, BBOT only shows in-scope events. To see them, we need to increase the report distance:</p> <pre><code># run the module again but with a higher report distance\n# this lets us see out-of-scope events (up to distance 1)\nbbot -t evilcorp.com -m mymodule -c scope_report_distance=1\n</code></pre> <p>Now, with the <code>report_distance=1</code>:</p> <pre><code>[SUCC] Starting scan suspicious_dobby\n[SCAN]                  suspicious_dobby (SCAN:e9d28f64527da53eaffc16f46f5deb20103bc78b)    TARGET  (distance-0)\n[INFO] mymodule: GOT EVENT: DNS_NAME(\"dns.google\", module=TARGET, tags={'soa-record', 'aaaa-record', 'ns-record', 'txt-record', 'distance-0', 'in-scope', 'resolved', 'domain', 'a-record', 'target'})\n[DNS_NAME]              dns.google  TARGET  (a-record, aaaa-record, distance-0, domain, in-scope, ns-record, resolved, soa-record, target, txt-record)\n[IP_ADDRESS]            8.8.4.4 mymodule   (distance-1, ipv4, ptr-record, resolved)\n[IP_ADDRESS]            2001:4860:4860::8888    mymodule    (distance-1, ipv6, ptr-record, resolved)\n[IP_ADDRESS]            8.8.8.8 mymodule   (distance-1, ipv4, ptr-record, resolved)\n[IP_ADDRESS]            2001:4860:4860::8844    mymodule    (distance-1, ipv6, ptr-record, resolved)\n[DNS_NAME]              ns3.zdns.google NS  (a-record, aaaa-record, distance-1, resolved, subdomain)\n[DNS_NAME]              ns1.zdns.google NS  (a-record, aaaa-record, distance-1, resolved, subdomain)\n[DNS_NAME]              ns4.zdns.google NS  (a-record, aaaa-record, distance-1, resolved, subdomain)\n[DNS_NAME]              ns2.zdns.google NS  (a-record, aaaa-record, distance-1, resolved, subdomain)\n[DNS_NAME]              xkcd.com    TXT (a-record, aaaa-record, distance-1, domain, mx-record, ns-record, resolved, soa-record, txt-record)\n[INFO] Finishing scan\n</code></pre>"},{"location":"contribution/#handle_event-and-emit_event","title":"<code>handle_event()</code> and <code>emit_event()</code>","text":"<p>The <code>handle_event()</code> method is the most important part of the module. By overriding this method, you control what the module does. During a scan, when an event from your <code>watched_events</code> is encountered (a <code>DNS_NAME</code> in this example), <code>handle_event()</code> is automatically called with that event.</p> <p>The <code>emit_event()</code> method is how modules return data. When you call <code>emit_event()</code>, it creates an event and prints it to the console. It also distributes it any modules that are interested in that data type.</p>"},{"location":"contribution/#module-dependencies","title":"Module Dependencies","text":"<p>BBOT automates module dependencies with Ansible. If your module relies on a third-party binary, OS package, or python library, you can specify them in the <code>deps_*</code> attributes of your module.</p> <pre><code>class MyModule(BaseModule):\n    ...\n    deps_pip = [\"beautifulsoup4\"]\n    deps_apt = [\"chromium-browser\"]\n    deps_ansible = [\n        {\n            \"name\": \"install dev tools\",\n            \"package\": {\"name\": [\"gcc\", \"git\", \"make\"], \"state\": \"present\"},\n            \"become\": True,\n            \"ignore_errors\": True,\n        },\n        {\n            \"name\": \"Download massdns source code\",\n            \"git\": {\n                \"repo\": \"https://github.com/blechschmidt/massdns.git\",\n                \"dest\": \"#{BBOT_TEMP}/massdns\",\n                \"single_branch\": True,\n                \"version\": \"master\",\n            },\n        },\n        {\n            \"name\": \"Build massdns\",\n            \"command\": {\"chdir\": \"#{BBOT_TEMP}/massdns\", \"cmd\": \"make\", \"creates\": \"#{BBOT_TEMP}/massdns/bin/massdns\"},\n        },\n        {\n            \"name\": \"Install massdns\",\n            \"copy\": {\"src\": \"#{BBOT_TEMP}/massdns/bin/massdns\", \"dest\": \"#{BBOT_TOOLS}/\", \"mode\": \"u+x,g+x,o+x\"},\n        },\n    ]\n</code></pre>"},{"location":"how_it_works/","title":"What is it?","text":"<p>BBOT is a system of modules that interchange data recursively. Okay, but like, what is it?</p>"},{"location":"how_it_works/#what-it-isnt","title":"What It Isn't","text":"<p>BBOT's discovery process does not have \"phases\", or \"stages\"; i.e. it does not work like this:</p> <p></p> <p>This is a traditional OSINT process, where you start with a target and you work in stages. Each stage gets you a little more data and requires more cleaning/deduplication, until finally you reach the end. The problem with this approach is that it misses things. </p> <p>Imagine if on the last step of this process, you discovered a new subdomain. Awesome! But wait, shouldn't you go back and check that one the same way you did the others? Shouldn't you port-scan it and SSL-mine it and so on? Maybe you're a thorough, hard-working human, and you take the time to do that. Maybe by doing that, you find another subdomain! Sigh. What about this time? Should you start over again for that one? You see the dilemma.</p> <p></p>"},{"location":"how_it_works/#what-it-is","title":"What It Is","text":"<p>Instead, BBOT works recursively, treating each new individual piece of data as an opportunity to find even more. When it finds something, it feeds it back into the machine and uses it to fuel the discovery process. It continues to churn like this until there is no new data to discover.</p> <p></p>"},{"location":"how_it_works/#module-example","title":"Module Example","text":"<p>In a simple example, we run a BBOT scan with three modules: <code>nmap</code>, <code>sslcert</code>, and <code>httpx</code>. Each of these modules \"consume\" a certain type of data:</p> <ul> <li><code>nmap</code> consumes <code>DNS_NAME</code>s, port-scans them, and outputs <code>OPEN_TCP_PORT</code>s</li> <li><code>sslcert</code> consumes <code>OPEN_TCP_PORT</code>s, grabs certs, and extracts <code>DNS_NAME</code>s</li> <li><code>httpx</code> consumes <code>OPEN_TCP_PORT</code>s and visits any web services, ultimately producing new <code>DNS_NAME</code>s</li> </ul> <pre><code>graph TD\n  nmap --&gt;|OPEN_TCP_PORT| sslcert;\n  nmap --&gt;|OPEN_TCP_PORT| httpx;\n  sslcert --&gt; |DNS_NAME| nmap;\n  httpx --&gt; |DNS_NAME| nmap;</code></pre> <p>This allows for some interesting chains of events. Given a single target such as <code>evilcorp.com</code>, <code>nmap</code> may start by discovering an <code>OPEN_TCP_PORT</code> <code>evilcorp.com:443</code>. <code>sslcert</code> and <code>httpx</code> will then visit that port and extract more hostnames, which are in turn scanned by <code>nmap</code> to produce more open ports which are visited by <code>sslcert</code> and <code>httpx</code>, which discover more hostnames, which are again passed to <code>nmap</code>, and so on...</p> <p>This is a simple example with only a few modules, but you can being to see how if 30 or 40 modules were enabled, they could feed each other exponentially to produce an immense amount of data. This recursion is exactly how BBOT is able to outperform other tools.</p> <p>For a full list of event types and which modules consume/produce them, see List of Event Types.</p>"},{"location":"release_history/","title":"Release History","text":""},{"location":"release_history/#v105","title":"v1.0.5","text":"<p>March 10, 2023</p> <p>New Modules:</p> <ul> <li>Badsecrets (blacklist3r but better!)</li> <li>Subdomain Hijacking (uses can-i-take-over-xyz)</li> <li>WafW00f</li> <li>Fingerprintx</li> <li>Masscan</li> <li>Robots.txt</li> <li>Web Report</li> <li>IIS shortnames (Pure Python rewrite)</li> </ul> <p>New Features:</p> <ul> <li>Automatic tagging of cloud resources (with cloudcheck)</li> <li>Significant performance increases</li> <li>Bug fixes</li> <li>Better tests + code coverage</li> <li>Support for punycode (non-ascii) domains</li> <li>Better support for non-64-bit systems</li> <li>Enter key now toggles verbosity during scan</li> </ul>"},{"location":"release_history/#v104","title":"v1.0.4","text":"<p>December 15, 2022</p> <p>New Modules:</p> <ul> <li>Storage buckets:<ul> <li>Azure</li> <li>GCP</li> <li>AWS</li> <li>DigitalOcean</li> </ul> </li> <li>ipstack (geolocation)</li> <li>BeVigil</li> <li>ASN (rewrite)</li> </ul> <p>New Features:</p> <ul> <li>Colored vulnerabilities on CLI</li> <li>Log full nuclei output</li> <li>Various bugfixes</li> <li>Better handling of:<ul> <li>DNS wildcards</li> <li>Infinite DNS-record chains</li> <li>Infinite HTTP redirects</li> </ul> </li> <li>Improved module tests</li> </ul>"},{"location":"release_history/#v103","title":"v1.0.3","text":"<p>October 12, 2022</p> <p>Changes:</p> <ul> <li>Tag URL events with their corresponding IP address</li> <li>Automatic docker hub publishing</li> <li>Added <code>retries</code> option for httpx module</li> <li>Added <code>asset_inventory</code> output module</li> <li>Improvements to nuclei module</li> <li>Avoid unnecessary failed sudo attempts during dependency install</li> <li>Improved Python API</li> <li>Added AnubisDB module</li> <li>Various bugfixes</li> <li>Add examples to <code>--help</code> output</li> <li>Reduce annoying warnings on free API modules</li> <li>Update iis_shortnames .jar dependency</li> <li>Updated documentation to explain targets, whitelists, blacklists</li> <li>Added help for module-specific options</li> <li>Added warning if unable to validate public DNS servers (for massdns)</li> <li>Various performance optimizations</li> <li>Various bugfixes</li> <li>Fix Pypi auto-publishing</li> <li>Added bug report template</li> <li>Added examples in README</li> <li>Improved wildcard detection</li> <li>Added DNS retry functionality</li> <li>Improved excavate hostname extraction</li> <li>Added command-line option for installing all dependencies</li> <li>Improved gowitness dependency install, improved tests</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#installation-troubleshooting","title":"Installation troubleshooting","text":"<ul> <li><code>Fatal error from pip prevented installation.</code></li> <li><code>ERROR: No matching distribution found for bbot</code></li> <li><code>bash: /home/user/.local/bin/bbot: /home/user/.local/pipx/venvs/bbot/bin/python: bad interpreter</code></li> </ul> <p>If you get errors resembling any of the above, it's probably because your Python version is too old. To install a newer version (3.9+ is required), you will need to do something like this: <pre><code># install a newer version of python\nsudo apt install python3.9 python3.9-venv\n# install pipx\npython3.9 -m pip install --user pipx\n# add pipx to your path\npython3.9 -m pipx ensurepath\n# reboot\nreboot\n# install bbot\npython3.9 -m pipx install bbot\n# run bbot\nbbot --help\n</code></pre></p>"},{"location":"troubleshooting/#modulenotfounderror","title":"<code>ModuleNotFoundError</code>","text":"<p>If you run into a <code>ModuleNotFoundError</code>, try running your <code>bbot</code> command again with <code>--force-deps</code>. This will repair your modules' Python dependencies.</p>"},{"location":"troubleshooting/#regenerate-config","title":"Regenerate Config","text":"<p>As a troubleshooting step it is sometimes useful to clear out your older configs and let BBOT generate new ones. This will ensure that new defaults are property restored, etc. <pre><code># make a backup of the old configs\nmv ~/.config/bbot ~/.config/bbot.bak\n\n# generate new configs\nbbot\n</code></pre></p>"},{"location":"scanning/","title":"Scanning Overview","text":""},{"location":"scanning/#scan-names","title":"Scan Names","text":"<p>Every BBOT scan gets a random, mildly-entertaining name like <code>demonic_jimmy</code>. Output for that scan, including scan stats and any web screenshots, are saved to a folder by that name in <code>~/.bbot/scans</code>. The most recent 20 scans are kept, and older ones are removed.</p> <p>If you don't want a random name, you can change it with <code>-n</code>. You can also change the location of BBOT's output with <code>-o</code>:</p> <pre><code># save everything to the folder \"my_scan\" in the current directory\nbbot -t evilcorp.com -f subdomain-enum -m gowitness -n my_scan -o .\n</code></pre> <p>If you reuse a scan name, BBOT will automatically append to your previous output files.</p>"},{"location":"scanning/#targets-t","title":"Targets (<code>-t</code>)","text":"<p>Targets declare what's in-scope, and seed a scan with initial data. BBOT accepts an unlimited number of targets. They can be any of the following:</p> <ul> <li><code>DNS_NAME</code> (<code>evilcorp.com</code>)</li> <li><code>IP_ADDRESS</code> (<code>1.2.3.4</code>)</li> <li><code>IP_RANGE</code> (<code>1.2.3.0/24</code>)</li> <li><code>URL</code> (<code>https://www.evilcorp.com</code>)</li> </ul> <p>You can specify targets directly on the command line, load them from files, or both! For example:</p> <pre><code>$ cat targets.txt\n4.3.2.1\n1.2.3.0/24\nevilcorp.com\nevilcorp.co.uk\nhttps://www.evilcorp.co.uk\n\n# load targets from a file and from the command-line\n$ bbot -t targets.txt fsociety.com 5.6.7.0/24 -m nmap\n</code></pre> <p>On start, BBOT automatically converts Targets into Events.</p>"},{"location":"scanning/#modules-m","title":"Modules (<code>-m</code>)","text":"<p>To see a full list of modules and their descriptions, use <code>bbot -l</code> or see List of Modules.</p> <p>Modules are the part of BBOT that does the work -- port scanning, subdomain brute-forcing, API querying, etc. Modules consume Events (<code>IP_ADDRESS</code>, <code>DNS_NAME</code>, etc.) from each other, process the data in a useful way, then emit the results as new events. You can enable individual modules with <code>-m</code>.</p> <pre><code># Enable modules: nmap, sslcert, and httpx\nbbot -t www.evilcorp.com -m nmap sslcert httpx\n</code></pre>"},{"location":"scanning/#types-of-modules","title":"Types of Modules","text":"<p>Modules fall into three categories:</p> <ul> <li>Scan Modules:<ul> <li>These make up the majority of modules. Examples are <code>nmap</code>, <code>sslcert</code>, <code>httpx</code>, etc. Enable with <code>-m</code>.</li> </ul> </li> <li>Output Modules:<ul> <li>These output scan data to different formats/destinations. <code>human</code>, <code>json</code>, and <code>csv</code> are enabled by default. Enable others with <code>-om</code>. (See: Output)</li> </ul> </li> <li>Internal Modules:<ul> <li>These modules perform essential, common-sense tasks. They are always enabled, unless explicitly disabled via the config (e.g. <code>-c speculate=false</code>).<ul> <li><code>aggregate</code>: Summarizes results at the end of a scan</li> <li><code>excavate</code>: Extracts useful data such as subdomains from webpages, etc.</li> <li><code>speculate</code>: Intelligently infers new events, e.g. <code>OPEN_TCP_PORT</code> from <code>URL</code> or <code>IP_ADDRESS</code> from <code>IP_NETWORK</code>.</li> </ul> </li> </ul> </li> </ul> <p>For details in the inner workings of modules, see Creating a Module.</p>"},{"location":"scanning/#flags-f","title":"Flags (<code>-f</code>)","text":"<p>Flags are how BBOT categorizes its modules. In a way, you can think of them as groups. Flags let you enable a bunch of similar modules at the same time without having to specify them each individually. For example, <code>-f subdomain-enum</code> would enable every module with the <code>subdomain-enum</code> flag.</p> <pre><code># list all subdomain-enum modules\nbbot -f subdomain-enum -l\n</code></pre>"},{"location":"scanning/#filtering-by-flag","title":"Filtering by Flag","text":"<p>Modules can be easily filtered based on their flags:</p> <ul> <li><code>-f</code> Enable modules with this flag</li> <li><code>-rf</code> Require modules to have this flag</li> <li><code>-ef</code> Exclude modules with this flag</li> <li><code>-em</code> Exclude these individual modules</li> <li><code>-lf</code> List all available flags</li> </ul> <p>Every module is either <code>safe</code> or <code>aggressive</code>, and either <code>active</code> or <code>passive</code>. These can be useful for filtering. For example, if you wanted to enable all the <code>safe</code> modules, but exclude active ones, you could do:</p> <pre><code># Enable safe modules but exclude active ones\nbbot -t evilcorp.com -f safe -ef active\n</code></pre> <p>This is equivalent to requiring the passive flag:</p> <pre><code># Enable safe modules but only if they're also passive\nbbot -t evilcorp.com -f safe -rf passive\n</code></pre> <p>A single module can have multiple flags. For example, the <code>securitytrails</code> module is <code>passive</code>, <code>safe</code>, <code>subdomain-enum</code>. Below is a full list of flags and their associated modules.</p>"},{"location":"scanning/#list-of-flags","title":"List of Flags","text":"Flag # Modules Description Modules safe 58 Non-intrusive, safe to run affiliates, aggregate, anubisdb, asn, azure_tenant, badsecrets, bevigil, binaryedge, bucket_aws, bucket_azure, bucket_digitalocean, bucket_firebase, bucket_gcp, builtwith, c99, censys, certspotter, columbus, crobat, crt, dnscommonsrv, dnsdumpster, dnszonetransfer, emailformat, fingerprintx, fullhunt, git, github, gowitness, hackertarget, httpx, hunt, hunterio, iis_shortnames, ipstack, leakix, ntlm, otx, passivetotal, pgp, rapiddns, riddler, robots, secretsdb, securitytrails, shodan_dns, skymem, social, sslcert, subdomain_hijack, sublist3r, threatminer, urlscan, viewdns, virustotal, wappalyzer, wayback, zoomeye passive 42 Never connects to target systems affiliates, aggregate, anubisdb, asn, azure_tenant, bevigil, binaryedge, builtwith, c99, censys, certspotter, columbus, crobat, crt, dnscommonsrv, dnsdumpster, emailformat, excavate, fullhunt, github, hackertarget, hunterio, ipneighbor, ipstack, leakix, massdns, otx, passivetotal, pgp, rapiddns, riddler, securitytrails, shodan_dns, skymem, speculate, sublist3r, threatminer, urlscan, viewdns, virustotal, wayback, zoomeye active 37 Makes active connections to target systems badsecrets, bucket_aws, bucket_azure, bucket_digitalocean, bucket_firebase, bucket_gcp, bypass403, dnszonetransfer, ffuf, ffuf_shortnames, fingerprintx, generic_ssrf, git, gowitness, host_header, httpx, hunt, iis_shortnames, masscan, naabu, nmap, ntlm, nuclei, paramminer_cookies, paramminer_getparams, paramminer_headers, robots, secretsdb, smuggler, social, sslcert, subdomain_hijack, telerik, url_manipulation, vhost, wafw00f, wappalyzer subdomain-enum 35 Enumerates subdomains anubisdb, asn, azure_tenant, bevigil, binaryedge, builtwith, c99, censys, certspotter, columbus, crt, dnscommonsrv, dnsdumpster, dnszonetransfer, fullhunt, github, hackertarget, httpx, hunterio, ipneighbor, leakix, massdns, otx, passivetotal, rapiddns, riddler, securitytrails, shodan_dns, sslcert, subdomain_hijack, threatminer, urlscan, virustotal, wayback, zoomeye web-thorough 25 More advanced web scanning functionality badsecrets, bucket_aws, bucket_azure, bucket_digitalocean, bucket_firebase, bucket_gcp, bypass403, ffuf_shortnames, generic_ssrf, git, host_header, httpx, hunt, iis_shortnames, naabu, nmap, ntlm, robots, secretsdb, smuggler, sslcert, subdomain_hijack, telerik, url_manipulation, wappalyzer aggressive 19 Generates a large amount of network traffic bypass403, ffuf, ffuf_shortnames, generic_ssrf, host_header, ipneighbor, masscan, massdns, naabu, nmap, nuclei, paramminer_cookies, paramminer_getparams, paramminer_headers, smuggler, telerik, url_manipulation, vhost, wafw00f web-basic 15 Basic, non-intrusive web scan functionality badsecrets, bucket_aws, bucket_azure, bucket_firebase, bucket_gcp, git, httpx, hunt, iis_shortnames, ntlm, robots, secretsdb, sslcert, subdomain_hijack, wappalyzer slow 9 May take a long time to complete bucket_digitalocean, fingerprintx, massdns, paramminer_cookies, paramminer_getparams, paramminer_headers, smuggler, telerik, vhost cloud-enum 7 Enumerates cloud resources bucket_aws, bucket_azure, bucket_digitalocean, bucket_firebase, bucket_gcp, httpx, subdomain_hijack affiliates 6 Discovers affiliated hostnames/domains affiliates, azure_tenant, builtwith, sslcert, viewdns, zoomeye email-enum 6 Enumerates email addresses censys, emailformat, hunterio, pgp, skymem, sslcert deadly 3 Highly aggressive ffuf, nuclei, vhost portscan 3 Discovers open ports masscan, naabu, nmap web-paramminer 3 Discovers HTTP parameters through brute-force paramminer_cookies, paramminer_getparams, paramminer_headers iis-shortnames 2 Scans for IIS Shortname vulnerability ffuf_shortnames, iis_shortnames report 2 Generates a report at the end of the scan affiliates, asn social-enum 2 Enumerates social media httpx, social service-enum 1 Identifies protocols running on open ports fingerprintx subdomain-hijack 1 Detects hijackable subdomains subdomain_hijack web-screenshots 1 Takes screenshots of web pages gowitness"},{"location":"scanning/#dependencies","title":"Dependencies","text":"<p>BBOT modules have external dependencies ranging from OS packages (<code>openssl</code>) to binaries (<code>nmap</code>) to Python libraries (<code>wappalyzer</code>). When a module is enabled, installation of its dependencies happens at runtime with Ansible. BBOT provides several command-line flags to control how dependencies are installed.</p> <ul> <li><code>--no-deps</code> - Don't install module dependencies</li> <li><code>--force-deps</code> - Force install all module dependencies</li> <li><code>--retry-deps</code> - Try again to install failed module dependencies</li> <li><code>--ignore-failed-deps</code> - Run modules even if they have failed dependencies</li> <li><code>--install-all-deps</code> - Install dependencies for all modules (useful if you are provisioning a pentest system and want to install everything ahead of time)</li> </ul> <p>For details on how Ansible playbooks are attached to BBOT modules, see How to Write a Module.</p>"},{"location":"scanning/#scope","title":"Scope","text":"<p>For pentesters and bug bounty hunters, staying in scope is extremely important. BBOT takes this seriously, meaning that active modules (e.g. <code>nuclei</code>) will only touch in-scope resources.</p> <p>By default, scope is whatever you specify with <code>-t</code>. This includes child subdomains. For example, if you specify <code>-t evilcorp.com</code>, all its subdomains (<code>www.evilcorp.com</code>, <code>mail.evilcorp.com</code>, etc.) also become in-scope.</p>"},{"location":"scanning/#scope-distance","title":"Scope Distance","text":"<p>Since BBOT is recursive, it would quickly resort to scanning the entire internet without some kind of restraining mechanism. To solve this problem, every event discovered by BBOT is assigned a Scope Distance. Scope distance represents how far out from the main scope that data was discovered.</p> <p>For example, if your target is <code>evilcorp.com</code>, <code>www.evilcorp.com</code> would have a scope distance of <code>0</code> (i.e. in-scope). If BBOT discovers that <code>www.evilcorp.com</code> resolves to <code>1.2.3.4</code>, <code>1.2.3.4</code> is one hop away, which means it would have a scope distance of <code>1</code>. If <code>1.2.3.4</code> has a PTR record that points to <code>ecorp.blob.core.windows.net</code>, <code>ecorp.blob.core.windows.net</code> is two hops away, so its scope distance is <code>2</code>.</p> <p>Scope distance continues to increase the further out you get. Most modules (e.g. <code>nuclei</code> and <code>nmap</code>) only consume in-scope events. Certain other passive modules such as <code>asn</code> accept out to distance <code>1</code>. By default, DNS resolution happens out to a distance of <code>2</code>. Upon its discovery, any event that's determined to be in-scope (e.g. <code>www.evilcorp.com</code>) immediately becomes distance <code>0</code>, and the cycle starts over.</p>"},{"location":"scanning/#displaying-out-of-scope-events","title":"Displaying Out-of-scope Events","text":"<p>By default, BBOT only displays in-scope events (with a few exceptions such as <code>STORAGE_BUCKET</code>s). If you want to see more, you must increase the config value of <code>scope_report_distance</code>:</p> <pre><code># display out-of-scope events up to one hop away from the main scope\nbbot -t evilcorp.com -f subdomain-enum -c scope_report_distance=1\n</code></pre>"},{"location":"scanning/#strict-scope","title":"Strict Scope","text":"<p>If you want to scan only that specific target hostname and none of its children, you can specify <code>--strict-scope</code>.</p> <p>Note that <code>--strict-scope</code> only applies to targets and whitelists, but not blacklists. This means that if you put <code>internal.evilcorp.com</code> in your blacklist, you can be sure none of its subdomains will be scanned, even when using <code>--strict-scope</code>.</p>"},{"location":"scanning/#whitelists-and-blacklists","title":"Whitelists and Blacklists","text":"<p>BBOT allows precise control over scope with whitelists and blacklists. These both use the same syntax as <code>--target</code>, meaning they accept the same event types, and you can specify an unlimited number of them, via a file, the CLI, or both.</p> <p><code>--whitelist</code> enables you to override what's in scope. For example, if you want to run nuclei against <code>evilcorp.com</code>, but stay only inside their corporate IP range of <code>1.2.3.0/24</code>, you can accomplish this like so:</p> <pre><code># Seed scan with evilcorp.com, but restrict scope to 1.2.3.0/24\nbbot -t evilcorp.com --whitelist 1.2.3.0/24 -f subdomain-enum -m nmap nuclei --allow-deadly\n</code></pre> <p><code>--blacklist</code> takes ultimate precedence. Anything in the blacklist is completely excluded from the scan, even if it's in the whitelist.</p> <pre><code># Scan evilcorp.com, but exclude internal.evilcorp.com and its children\nbbot -t evilcorp.com --blacklist internal.evilcorp.com -f subdomain-enum -m nmap nuclei --allow-deadly\n</code></pre>"},{"location":"scanning/#dns-wildcards","title":"DNS Wildcards","text":"<p>BBOT has robust wildcard detection built-in. It can reliably detect wildcard domains, and will tag them accordingly:</p> <pre><code>[DNS_NAME]      github.io   TARGET  (a-record, a-wildcard-domain, aaaa-wildcard-domain, wildcard-domain)\n                                               ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^\n</code></pre> <p>Wildcard hosts are collapsed into a single host beginning with <code>_wildcard</code>:</p> <pre><code>[DNS_NAME]      _wildcard.github.io     TARGET  (a-record, a-wildcard, a-wildcard-domain, aaaa-record, aaaa-wildcard, aaaa-wildcard-domain, wildcard, wildcard-domain)\n                ^^^^^^^^^\n</code></pre> <p>If you don't want this, you can disable wildcard detection on a domain-to-domain basis in the config:</p> ~/.bbot/config/bbot.yml<pre><code>dns_wildcard_ignore:\n- evilcorp.com\n- evilcorp.co.uk\n</code></pre> <p>There are certain edge cases (such as with dynamic DNS rules) where BBOT's wildcard detection fails. In these cases, you can try increasing the number of wildcard checks in the config:</p> ~/.bbot/config/bbot.yml<pre><code># default == 10\ndns_wildcard_tests: 20\n</code></pre> <p>If that doesn't work you can consider blacklisting the offending domain.</p>"},{"location":"scanning/advanced/","title":"Advanced","text":"<p>Below you can find some advanced uses of BBOT.</p>"},{"location":"scanning/advanced/#bbot-as-a-python-library","title":"BBOT as a Python library","text":"<p>Synchronous</p> <pre><code>from bbot.scanner import Scanner\n\n# any number of targets can be specified\nscan = Scanner(\"example.com\", \"scanme.nmap.org\", modules=[\"nmap\", \"sslcert\"])\nfor event in scan.start():\n    print(event.json())\n</code></pre> <p>Asynchronous</p> <pre><code>from bbot.scanner import Scanner\n\nasync def main():\n    scan = Scanner(\"example.com\", \"scanme.nmap.org\", modules=[\"nmap\", \"sslcert\"])\n    async for event in scan.async_start():\n        print(event.json())\n\nimport asyncio\nasyncio.run(main())\n</code></pre>"},{"location":"scanning/advanced/#command-line-help","title":"Command-Line Help","text":"<pre><code>usage: bbot [-h] [--help-all] [-t TARGET [TARGET ...]] [-w WHITELIST [WHITELIST ...]] [-b BLACKLIST [BLACKLIST ...]] [--strict-scope] [-m MODULE [MODULE ...]] [-l]\n               [-em MODULE [MODULE ...]] [-f FLAG [FLAG ...]] [-lf] [-rf FLAG [FLAG ...]] [-ef FLAG [FLAG ...]] [-om MODULE [MODULE ...]] [--allow-deadly] [-n SCAN_NAME] [-o DIR]\n               [-c [CONFIG ...]] [-v] [-d] [-s] [--force] [-y] [--dry-run] [--current-config] [--no-deps | --force-deps | --retry-deps | --ignore-failed-deps | --install-all-deps] [-a]\n               [--version]\n\nBighuge BLS OSINT Tool\n\noptions:\n  -h, --help            show this help message and exit\n  --help-all            Display full help including module config options\n\nTarget:\n  -t TARGET [TARGET ...], --targets TARGET [TARGET ...]\n                        Targets to seed the scan\n  -w WHITELIST [WHITELIST ...], --whitelist WHITELIST [WHITELIST ...]\n                        What's considered in-scope (by default it's the same as --targets)\n  -b BLACKLIST [BLACKLIST ...], --blacklist BLACKLIST [BLACKLIST ...]\n                        Don't touch these things\n  --strict-scope        Don't consider subdomains of target/whitelist to be in-scope\n\nModules:\n  -m MODULE [MODULE ...], --modules MODULE [MODULE ...]\n                        Modules to enable. Choices: affiliates,anubisdb,asn,azure_tenant,badsecrets,bevigil,binaryedge,bucket_aws,bucket_azure,bucket_digitalocean,bucket_firebase,bucket_gcp,builtwith,bypass403,c99,censys,certspotter,columbus,crobat,crt,dnscommonsrv,dnsdumpster,dnszonetransfer,emailformat,ffuf,ffuf_shortnames,fingerprintx,fullhunt,generic_ssrf,git,github,gowitness,hackertarget,host_header,httpx,hunt,hunterio,iis_shortnames,ipneighbor,ipstack,leakix,masscan,massdns,naabu,nmap,ntlm,nuclei,otx,paramminer_cookies,paramminer_getparams,paramminer_headers,passivetotal,pgp,rapiddns,riddler,robots,secretsdb,securitytrails,shodan_dns,skymem,smuggler,social,sslcert,subdomain_hijack,sublist3r,telerik,threatminer,url_manipulation,urlscan,vhost,viewdns,virustotal,wafw00f,wappalyzer,wayback,zoomeye\n  -l, --list-modules    List available modules.\n  -em MODULE [MODULE ...], --exclude-modules MODULE [MODULE ...]\n                        Exclude these modules.\n  -f FLAG [FLAG ...], --flags FLAG [FLAG ...]\n                        Enable modules by flag. Choices: active,affiliates,aggressive,cloud-enum,deadly,email-enum,iis-shortnames,passive,portscan,report,safe,service-enum,slow,social-enum,subdomain-enum,subdomain-hijack,web-basic,web-paramminer,web-screenshots,web-thorough\n  -lf, --list-flags     List available flags.\n  -rf FLAG [FLAG ...], --require-flags FLAG [FLAG ...]\n                        Only enable modules with these flags (e.g. -rf passive)\n  -ef FLAG [FLAG ...], --exclude-flags FLAG [FLAG ...]\n                        Disable modules with these flags. (e.g. -ef aggressive)\n  -om MODULE [MODULE ...], --output-modules MODULE [MODULE ...]\n                        Output module(s). Choices: asset_inventory,csv,http,human,json,neo4j,python,web_report,websocket\n  --allow-deadly        Enable the use of highly aggressive modules\n\nScan:\n  -n SCAN_NAME, --name SCAN_NAME\n                        Name of scan (default: random)\n  -o DIR, --output-dir DIR\n  -c [CONFIG ...], --config [CONFIG ...]\n                        custom config file, or configuration options in key=value format: 'modules.shodan.api_key=1234'\n  -v, --verbose         Be more verbose\n  -d, --debug           Enable debugging\n  -s, --silent          Be quiet\n  --force               Run scan even if module setups fail\n  -y, --yes             Skip scan confirmation prompt\n  --dry-run             Abort before executing scan\n  --current-config      Show current config in YAML format\n\nModule dependencies:\n  Control how modules install their dependencies\n\n  --no-deps             Don't install module dependencies\n  --force-deps          Force install all module dependencies\n  --retry-deps          Try again to install failed module dependencies\n  --ignore-failed-deps  Run modules even if they have failed dependencies\n  --install-all-deps    Install dependencies for all modules\n\nAgent:\n  Report back to a central server\n\n  -a, --agent-mode      Start in agent mode\n\nMisc:\n  --version             show BBOT version and exit\n\nEXAMPLES\n\n    Subdomains:\n        bbot -t evilcorp.com -f subdomain-enum\n\n    Subdomains (passive only):\n        bbot -t evilcorp.com -f subdomain-enum -rf passive\n\n    Subdomains + port scan + web screenshots:\n        bbot -t evilcorp.com -f subdomain-enum -m nmap gowitness -n my_scan -o .\n\n    Subdomains + basic web scan:\n        bbot -t evilcorp.com -f subdomain-enum web-basic\n\n    Web spider:\n        bbot -t www.evilcorp.com -m httpx robots badsecrets secretsdb -c web_spider_distance=2 web_spider_depth=2\n\n    Everything everywhere all at once:\n        bbot -t evilcorp.com -f subdomain-enum email-enum cloud-enum web-basic -m nmap gowitness nuclei --allow-deadly\n\n    List modules:\n        bbot -l\n\n    List flags:\n        bbot -lf\n</code></pre>"},{"location":"scanning/configuration/","title":"Configuration Overview","text":"<p>BBOT has a YAML config at <code>~/.config/bbot</code>. This config is different from the command-line arguments. This is where you change settings such as BBOT's HTTP proxy, rate limits, or global User-Agent. It's also where you put modules' API keys.</p> <p>For a list of all possible config options, see:</p> <ul> <li>Global Options</li> <li>Module Options</li> </ul> <p>For examples of common config changes, see Tips and Tricks.</p>"},{"location":"scanning/configuration/#configuration-files","title":"Configuration Files","text":"<p>BBOT loads its config from the following files, in this order:</p> <ul> <li><code>~/.config/bbot/bbot.yml</code>     &lt;-- Use this one as your main config</li> <li><code>~/.config/bbot/secrets.yml</code>  &lt;-- Use this one for sensitive stuff like API keys</li> <li>command line (<code>--config</code>)     &lt;-- Use this to specify a custom config file or override individual config options</li> </ul> <p>These config files will be automatically created for you when you first run BBOT.</p>"},{"location":"scanning/configuration/#yaml-config-vs-command-line","title":"YAML Config vs Command Line","text":"<p>You can specify config options either via the command line or the config. For example, if you want to proxy your BBOT scan through a local proxy like Burp Suite, you could either do:</p> <pre><code># send BBOT traffic through an HTTP proxy\nbbot -t evilcorp.com --config http_proxy=http://127.0.0.1:8080\n</code></pre> <p>Or, in <code>~/.config/bbot/config.yml</code>:</p> ~/.bbot/config/bbot.yml<pre><code>http_proxy: http://127.0.0.1:8080\n</code></pre> <p>These two are equivalent.</p> <p>Config options specified via the command-line take precedence over all others. You can give BBOT a custom config file with <code>--config myconf.yml</code>, or individual arguments like this: <code>--config modules.shodan_dns.api_key=deadbeef</code>. To display the full and current BBOT config, including any command-line arguments, use <code>bbot --current-config</code>.</p> <p>Note that placing the following in <code>bbot.yml</code>: ~/.bbot/config/bbot.yml<pre><code>modules:\nshodan_dns:\napi_key: deadbeef\n</code></pre> Is the same as: <pre><code>bbot --config modules.shodan_dns.api_key=deadbeef\n</code></pre></p>"},{"location":"scanning/configuration/#global-config-options","title":"Global Config Options","text":"<p>Below is a full list of the config options supported, along with their defaults.</p> defaults.yml<pre><code>### BASIC OPTIONS ###\n\n# BBOT working directory\nhome: ~/.bbot\n# Don't output events that are further than this from the main scope\n# 1 == 1 hope away from main scope\n# 0 == in scope only\nscope_report_distance: 0\n# Generate new DNS_NAME and IP_ADDRESS events through DNS resolution\ndns_resolution: true\n# Limit the number of BBOT threads\nmax_threads: 25\n# Rate-limit DNS\ndns_queries_per_second: 1000\n# Rate-limit HTTP\nweb_requests_per_second: 100\n# Interval for displaying status messages\nstatus_frequency: 15\n# HTTP proxy\nhttp_proxy: # Web user-agent\nuser_agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.79 Safari/537.36\n\n### WEB SPIDER ###\n\n# Set the maximum number of HTTP links that can be followed in a row (0 == no spidering allowed)\nweb_spider_distance: 0\n# Set the maximum directory depth for the web spider\nweb_spider_depth: 1\n# Set the maximum number of links that can be followed per page\nweb_spider_links_per_page: 25\n\n\n### ADVANCED OPTIONS ###\n\n# How far out from the main scope to search\nscope_search_distance: 0\n# How far out from the main scope to resolve DNS names / IPs\nscope_dns_search_distance: 2\n# Limit how many DNS records can be followed in a row (stop malicious/runaway DNS records)\ndns_resolve_distance: 5\n\n# Infer certain events from others, e.g. IPs from IP ranges, DNS_NAMEs from URLs, etc.\nspeculate: True\n# Passively search event data for URLs, hostnames, emails, etc.\nexcavate: True\n# Summarize activity at the end of a scan\naggregate: True\n\n# HTTP timeout (for Python requests; API calls, etc.)\nhttp_timeout: 10\n# HTTP timeout (for httpx)\nhttpx_timeout: 5\n# Custom HTTP headers (e.g. cookies, etc.)\n# in the format { \"Header-Key\": \"header_value\" }\n# These are attached to all in-scope HTTP requests\n# Note that some modules (e.g. github) may end up sending these to out-of-scope resources\nhttp_headers: {}\n# HTTP retries (for Python requests; API calls, etc.)\nhttp_retries: 1\n# HTTP retries (for httpx)\nhttpx_retries: 1\n# Enable/disable debug messages for web requests/responses\nhttp_debug: false\n# Maximum number of HTTP redirects to follow\nhttp_max_redirects: 5\n# DNS query timeout\ndns_timeout: 5\n# How many times to retry DNS queries\ndns_retries: 1\n# Disable BBOT's smart DNS wildcard handling for select domains\ndns_wildcard_ignore: []\n# How many sanity checks to make when verifying wildcard DNS\n# Increase this value if BBOT's wildcard detection isn't working\ndns_wildcard_tests: 10\n# Skip DNS requests for a certain domain and rdtype after encountering this many timeouts or SERVFAILs\n# This helps prevent faulty DNS servers from hanging up the scan\ndns_abort_threshold: 10\n# Don't show PTR records containing IP addresses\ndns_filter_ptrs: true\n# Enable/disable debug messages for dns queries\ndns_debug: false\n# Whether to verify SSL certificates\nssl_verify: false\n# How many scan results to keep before cleaning up the older ones\nkeep_scans: 20\n# Completely ignore URLs with these extensions\nurl_extension_blacklist:\n# images\n- png\n- jpg\n- bmp\n- ico\n- jpeg\n- gif\n- svg\n# web/fonts\n- css\n- woff\n- woff2\n- ttf\n# audio\n- mp3\n- m4a\n- wav\n- flac\n# video\n- mp4\n- mkv\n- avi\n- wmv\n- mov\n- flv\n- webm\n# Distribute URLs with these extensions only to httpx (these are omitted from output)\nurl_extension_httpx_only:\n- js\n# Don't output these types of events (they are still distributed to modules)\nomit_event_types:\n- HTTP_RESPONSE\n- URL_UNVERIFIED\n# - DNS_NAME_UNRESOLVED\n# - IP_ADDRESS\n# URL of BBOT server\nagent_url: ''\n# Agent Bearer authentication token\nagent_token: ''\n\n# Custom interactsh server settings\ninteractsh_server: null\ninteractsh_token: null\ninteractsh_disable: false\n</code></pre>"},{"location":"scanning/configuration/#module-config-options","title":"Module Config Options","text":"<p>Many modules accept their own configuration options. These options have the ability to change their behavior. For example, the <code>nmap</code> module accepts options for <code>ports</code>, <code>timing</code>, etc. Below is a list of all possible module config options.</p> Config Option Type Description Default modules.bucket_aws.permutations bool Whether to try permutations False modules.bucket_azure.permutations bool Whether to try permutations False modules.bucket_digitalocean.permutations bool Whether to try permutations False modules.bucket_firebase.permutations bool Whether to try permutations False modules.bucket_gcp.permutations bool Whether to try permutations False modules.dnszonetransfer.timeout int Max seconds to wait before timing out 10 modules.ffuf.extensions str Optionally include a list of extensions to extend the keyword with (comma separated) modules.ffuf.lines int take only the first N lines from the wordlist when finding directories 5000 modules.ffuf.max_depth int the maxium directory depth to attempt to solve 0 modules.ffuf.version str ffuf version 2.0.0 modules.ffuf.wordlist str Specify wordlist to use when finding directories https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/raft-small-directories.txt modules.ffuf_shortnames.extensions str Optionally include a list of extensions to extend the keyword with (comma separated) modules.ffuf_shortnames.find_common_prefixes bool Attempt to automatically detect common prefixes and make additional ffuf runs against them False modules.ffuf_shortnames.find_delimeters bool Attempt to detect common delimeters and make additional ffuf runs against them True modules.ffuf_shortnames.ignore_redirects bool Explicitly ignore redirects (301,302) True modules.ffuf_shortnames.lines int take only the first N lines from the wordlist when finding directories 1000000 modules.ffuf_shortnames.max_depth int the maxium directory depth to attempt to solve 1 modules.ffuf_shortnames.version str ffuf version 2.0.0 modules.ffuf_shortnames.wordlist str Specify wordlist to use when finding directories modules.ffuf_shortnames.wordlist_extensions str Specify wordlist to use when making extension lists modules.fingerprintx.version str fingerprintx version 1.1.4 modules.gowitness.output_path str where to save screenshots modules.gowitness.resolution_x int screenshot resolution x 1440 modules.gowitness.resolution_y int screenshot resolution y 900 modules.gowitness.threads int threads used to run 4 modules.gowitness.timeout int preflight check timeout 10 modules.gowitness.version str gowitness version 2.4.2 modules.httpx.in_scope_only bool Only visit web resources that are in scope. True modules.httpx.max_response_size int Max response size in bytes 5242880 modules.httpx.threads int Number of httpx threads to use 50 modules.httpx.version str httpx version 1.2.5 modules.iis_shortnames.detect_only bool Only detect the vulnerability and do not run the shortname scanner True modules.iis_shortnames.max_node_count int Limit how many nodes to attempt to resolve on any given recursion branch 30 modules.masscan.ping_first bool Only portscan hosts that reply to pings False modules.masscan.ports str Ports to scan 80,443 modules.masscan.rate int Rate in packets per second 600 modules.masscan.use_cache bool Instead of scanning, use the results from the previous scan False modules.masscan.wait int Seconds to wait for replies after scan is complete 10 modules.naabu.ports str ports to scan modules.naabu.skip_host_discovery bool skip host discovery (-Pn) True modules.naabu.top_ports int top ports to scan 100 modules.naabu.version str naabu version 2.1.1 modules.nmap.ports str ports to scan modules.nmap.skip_host_discovery bool skip host discovery (-Pn) True modules.nmap.timing str <code>-T&lt;0-5&gt;: Set timing template (higher is faster)</code> T4 modules.nmap.top_ports int top ports to scan 100 modules.ntlm.try_all bool Try every NTLM endpoint False modules.nuclei.budget int Used in budget mode to set the number of requests which will be alloted to the nuclei scan 1 modules.nuclei.concurrency int maximum number of templates to be executed in parallel (default 25) 25 modules.nuclei.directory_only bool Filter out 'file' URL event (default True) True modules.nuclei.etags str tags to exclude from the scan modules.nuclei.mode str manual technology modules.nuclei.ratelimit int maximum number of requests to send per second (default 150) 150 modules.nuclei.severity str Filter based on severity field available in the template. modules.nuclei.tags str execute a subset of templates that contain the provided tags modules.nuclei.templates str template or template directory paths to include in the scan modules.nuclei.version str nuclei version 2.9.4 modules.paramminer_cookies.wordlist str Define the wordlist to be used to derive cookies https://raw.githubusercontent.com/PortSwigger/param-miner/master/resources/params modules.paramminer_getparams.wordlist str Define the wordlist to be used to derive GET params https://raw.githubusercontent.com/PortSwigger/param-miner/master/resources/params modules.paramminer_headers.wordlist str Define the wordlist to be used to derive headers https://raw.githubusercontent.com/PortSwigger/param-miner/master/resources/headers modules.robots.include_allow bool Include 'Allow' Entries True modules.robots.include_disallow bool Include 'Disallow' Entries True modules.robots.include_sitemap bool Include 'sitemap' entries False modules.secretsdb.min_confidence int Only use signatures with this confidence score or higher 99 modules.secretsdb.signatures str File path or URL to YAML signatures https://raw.githubusercontent.com/blacklanternsecurity/secrets-patterns-db/master/db/rules-stable.yml modules.sslcert.skip_non_ssl bool Don't try common non-SSL ports True modules.sslcert.timeout float Socket connect timeout in seconds 5.0 modules.subdomain_hijack.fingerprints str URL or path to fingerprints.json https://raw.githubusercontent.com/EdOverflow/can-i-take-over-xyz/master/fingerprints.json modules.telerik.exploit_RAU_crypto bool Attempt to confirm any RAU AXD detections are vulnerable False modules.url_manipulation.allow_redirects bool Allowing redirects will sometimes create false positives. Disallowing will sometimes create false negatives. Allowed by default. True modules.vhost.force_basehost str Use a custom base host (e.g. evilcorp.com) instead of the default behavior of using the current URL modules.vhost.lines int take only the first N lines from the wordlist when finding directories 5000 modules.vhost.wordlist str Wordlist containing subdomains https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/subdomains-top1million-5000.txt modules.wafw00f.generic_detect bool When no specific WAF detections are made, try to peform a generic detect True modules.bevigil.api_key str BeVigil OSINT API Key modules.bevigil.urls bool Emit URLs in addition to DNS_NAMEs False modules.binaryedge.api_key str BinaryEdge API key modules.binaryedge.max_records int Limit results to help prevent exceeding API quota 1000 modules.builtwith.api_key str Builtwith API key modules.builtwith.redirects bool Also look up inbound and outbound redirects True modules.c99.api_key str c99.nl API key modules.censys.api_id str Censys.io API ID modules.censys.api_secret str Censys.io API Secret modules.columbus.limit int Max number of subdomains to retrieve 500 modules.fullhunt.api_key str FullHunt API Key modules.github.api_key str Github token modules.hunterio.api_key str Hunter.IO API key modules.ipneighbor.num_bits int Netmask size (in CIDR notation) to check. Default is 4 bits (16 hosts) 4 modules.ipstack.api_key str IPStack GeoIP API Key modules.leakix.api_key str LeakIX API Key modules.massdns.max_mutations int Max number of smart mutations per subdomain 500 modules.massdns.max_resolvers int Number of concurrent massdns resolvers 1000 modules.massdns.wordlist str Subdomain wordlist URL https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/subdomains-top1million-5000.txt modules.passivetotal.api_key str RiskIQ API Key modules.passivetotal.username str RiskIQ Username modules.pgp.search_urls list PGP key servers to search <code>['https://keyserver.ubuntu.com/pks/lookup?fingerprint=on&amp;op=vindex&amp;search=&lt;query&gt;', 'http://the.earth.li:11371/pks/lookup?fingerprint=on&amp;op=vindex&amp;search=&lt;query&gt;']</code> modules.securitytrails.api_key str SecurityTrails API key modules.shodan_dns.api_key str Shodan API key modules.urlscan.urls bool Emit URLs in addition to DNS_NAMEs False modules.virustotal.api_key str VirusTotal API Key modules.wayback.garbage_threshold int Dedupe similar urls if they are in a group of this size or higher (lower values == less garbage data) 10 modules.wayback.urls bool emit URLs in addition to DNS_NAMEs False modules.zoomeye.api_key str ZoomEye API key modules.zoomeye.include_related bool Include domains which may be related to the target False modules.zoomeye.max_pages int How many pages of results to fetch 20 output_modules.asset_inventory.output_file str Set a custom output file output_modules.asset_inventory.summary_netmask int Subnet mask to use when summarizing IP addresses at end of scan 16 output_modules.asset_inventory.use_previous bool <code>Emit previous asset inventory as new events (use in conjunction with -n &lt;old_scan_name&gt;)</code> False output_modules.csv.output_file str Output to CSV file output_modules.http.bearer str Authorization Bearer token output_modules.http.method str HTTP method POST output_modules.http.password str Password (basic auth) output_modules.http.timeout int HTTP timeout 10 output_modules.http.url str Web URL output_modules.http.username str Username (basic auth) output_modules.human.console bool Output to console True output_modules.human.output_file str Output to file output_modules.json.console bool Output to console False output_modules.json.output_file str Output to file output_modules.neo4j.password str Neo4j password bbotislife output_modules.neo4j.uri str Neo4j server + port bolt://localhost:7687 output_modules.neo4j.username str Neo4j username neo4j output_modules.web_report.css_theme_file str CSS theme URL for HTML output https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.1.0/github-markdown.min.css output_modules.web_report.output_file str Output to file output_modules.websocket.token str Authorization Bearer token output_modules.websocket.url str Web URL internal_modules.speculate.max_hosts int Max number of IP_RANGE hosts to convert into IP_ADDRESS events 65536 internal_modules.speculate.ports list The set of ports to speculate on [80, 443]"},{"location":"scanning/events/","title":"Events","text":"<p>An Event is a piece of data discovered by BBOT. Examples include <code>IP_ADDRESS</code>, <code>DNS_NAME</code>, <code>EMAIL_ADDRESS</code>, <code>URL</code>, etc. When you run a BBOT scan, events are constantly being exchanged between modules. They are also output to the console:</p> <pre><code>[DNS_NAME]      www.evilcorp.com    sslcert         (distance-0, in-scope, resolved, subdomain, a-record)\n ^^^^^^^^       ^^^^^^^^^^^^^^^^    ^^^^^^^          ^^^^^^^^^^\nevent type      event data          source module    tags\n</code></pre> <p>In addition to the obvious data (e.g. <code>www.evilcorp.com</code>), an event also contains other useful information such as:</p> <ul> <li>a <code>.timestamp</code> of when the data was discovered</li> <li>the <code>.module</code> that discovered it</li> <li>the <code>.source</code> event that led to its discovery</li> <li>its <code>.scope_distance</code> (how many hops it is from the main scope, 0 == in-scope)</li> <li>a list of <code>.tags</code> that describe the data (<code>mx-record</code>, <code>http-title</code>, etc.)</li> </ul> <p>These attributes allow us to construct a visual graph of events (e.g. in Neo4j) and query/filter/grep them more easily. Here is what a typical event looks like in JSON format:</p> <pre><code>{\n\"type\": \"URL\",\n\"id\": \"URL:017ec8e5dc158c0fd46f07169f8577fb4b45e89a\",\n\"data\": \"http://www.blacklanternsecurity.com/\",\n\"web_spider_distance\": 0,\n\"scope_distance\": 0,\n\"scan\": \"SCAN:4d786912dbc97be199da13074699c318e2067a7f\",\n\"timestamp\": 1688526222.723366,\n\"resolved_hosts\": [\"185.199.108.153\"],\n\"source\": \"OPEN_TCP_PORT:cf7e6a937b161217eaed99f0c566eae045d094c7\",\n\"tags\": [\n\"in-scope\",\n\"distance-0\",\n\"dir\",\n\"ip-185-199-108-153\",\n\"status-301\",\n\"http-title-301-moved-permanently\"\n],\n\"module\": \"httpx\",\n\"module_sequence\": \"httpx\"\n}\n</code></pre> <p>Below is a full list of event types along with which modules produce/consume them.</p>"},{"location":"scanning/events/#list-of-event-types","title":"List of Event Types","text":"Event Type # Consuming Modules # Producing Modules Consuming Modules Producing Modules * 8 0 affiliates, csv, http, human, json, neo4j, python, websocket ASN 0 1 asn DNS_NAME 46 36 anubisdb, asset_inventory, azure_tenant, bevigil, binaryedge, bucket_aws, bucket_azure, bucket_digitalocean, bucket_firebase, bucket_gcp, builtwith, c99, censys, certspotter, columbus, crobat, crt, dnscommonsrv, dnsdumpster, dnszonetransfer, emailformat, fullhunt, github, hackertarget, hunterio, leakix, massdns, naabu, nmap, otx, passivetotal, pgp, rapiddns, riddler, securitytrails, shodan_dns, skymem, speculate, subdomain_hijack, sublist3r, threatminer, urlscan, viewdns, virustotal, wayback, zoomeye anubisdb, azure_tenant, bevigil, binaryedge, builtwith, c99, censys, certspotter, columbus, crobat, crt, dnscommonsrv, dnsdumpster, dnszonetransfer, fullhunt, hackertarget, hunterio, leakix, massdns, ntlm, otx, passivetotal, rapiddns, riddler, securitytrails, shodan_dns, speculate, sslcert, sublist3r, threatminer, urlscan, vhost, viewdns, virustotal, wayback, zoomeye DNS_NAME_UNRESOLVED 2 0 speculate, subdomain_hijack EMAIL_ADDRESS 0 6 censys, emailformat, hunterio, pgp, skymem, sslcert FINDING 2 21 asset_inventory, web_report badsecrets, bucket_aws, bucket_azure, bucket_digitalocean, bucket_firebase, bucket_gcp, bypass403, git, host_header, hunt, ntlm, nuclei, paramminer_cookies, paramminer_getparams, paramminer_headers, secretsdb, smuggler, speculate, subdomain_hijack, telerik, url_manipulation GEOLOCATION 0 1 ipstack HTTP_RESPONSE 8 1 badsecrets, excavate, host_header, hunt, ntlm, secretsdb, speculate, wappalyzer httpx IP_ADDRESS 7 4 asn, asset_inventory, ipneighbor, ipstack, naabu, nmap, speculate asset_inventory, censys, ipneighbor, speculate IP_RANGE 1 0 speculate OPEN_PORT 0 1 censys OPEN_TCP_PORT 4 5 asset_inventory, fingerprintx, httpx, sslcert asset_inventory, masscan, naabu, nmap, speculate PROTOCOL 0 2 censys, fingerprintx SCAN 1 0 masscan SOCIAL 0 1 social STORAGE_BUCKET 6 5 bucket_aws, bucket_azure, bucket_digitalocean, bucket_firebase, bucket_gcp, speculate bucket_aws, bucket_azure, bucket_digitalocean, bucket_firebase, bucket_gcp TECHNOLOGY 2 2 asset_inventory, web_report gowitness, wappalyzer URL 21 2 asset_inventory, bypass403, ffuf, generic_ssrf, git, gowitness, httpx, iis_shortnames, ntlm, nuclei, paramminer_cookies, paramminer_getparams, paramminer_headers, robots, smuggler, speculate, telerik, url_manipulation, vhost, wafw00f, web_report gowitness, httpx URL_HINT 1 1 ffuf_shortnames iis_shortnames URL_UNVERIFIED 3 10 httpx, social, speculate bevigil, excavate, ffuf, ffuf_shortnames, github, gowitness, hunterio, robots, urlscan, wayback VHOST 1 1 web_report vhost VULNERABILITY 2 4 asset_inventory, web_report badsecrets, generic_ssrf, nuclei, telerik WAF 0 1 wafw00f WEBSCREENSHOT 0 1 gowitness"},{"location":"scanning/list_of_modules/","title":"List of Modules","text":"Module Type Needs API Key Description Flags Consumed Events Produced Events badsecrets scan No Library for detecting known or weak secrets across many web frameworks active, safe, web-basic, web-thorough HTTP_RESPONSE FINDING, VULNERABILITY bucket_aws scan No Check for S3 buckets related to target active, cloud-enum, safe, web-basic, web-thorough DNS_NAME, STORAGE_BUCKET FINDING, STORAGE_BUCKET bucket_azure scan No Check for Azure storage blobs related to target active, cloud-enum, safe, web-basic, web-thorough DNS_NAME, STORAGE_BUCKET FINDING, STORAGE_BUCKET bucket_digitalocean scan No Check for DigitalOcean spaces related to target active, cloud-enum, safe, slow, web-thorough DNS_NAME, STORAGE_BUCKET FINDING, STORAGE_BUCKET bucket_firebase scan No Check for open Firebase databases related to target active, cloud-enum, safe, web-basic, web-thorough DNS_NAME, STORAGE_BUCKET FINDING, STORAGE_BUCKET bucket_gcp scan No Check for Google object storage related to target active, cloud-enum, safe, web-basic, web-thorough DNS_NAME, STORAGE_BUCKET FINDING, STORAGE_BUCKET bypass403 scan No Check 403 pages for common bypasses active, aggressive, web-thorough URL FINDING dnszonetransfer scan No Attempt DNS zone transfers active, safe, subdomain-enum DNS_NAME DNS_NAME ffuf scan No A fast web fuzzer written in Go active, aggressive, deadly URL URL_UNVERIFIED ffuf_shortnames scan No Use ffuf in combination IIS shortnames active, aggressive, iis-shortnames, web-thorough URL_HINT URL_UNVERIFIED fingerprintx scan No Fingerprint exposed services like RDP, SSH, MySQL, etc. active, safe, service-enum, slow OPEN_TCP_PORT PROTOCOL generic_ssrf scan No Check for generic SSRFs active, aggressive, web-thorough URL VULNERABILITY git scan No Check for exposed .git repositories active, safe, web-basic, web-thorough URL FINDING gowitness scan No Take screenshots of webpages active, safe, web-screenshots URL TECHNOLOGY, URL, URL_UNVERIFIED, WEBSCREENSHOT host_header scan No Try common HTTP Host header spoofing techniques active, aggressive, web-thorough HTTP_RESPONSE FINDING httpx scan No Visit webpages. Many other modules rely on httpx active, cloud-enum, safe, social-enum, subdomain-enum, web-basic, web-thorough OPEN_TCP_PORT, URL, URL_UNVERIFIED HTTP_RESPONSE, URL hunt scan No Watch for commonly-exploitable HTTP parameters active, safe, web-basic, web-thorough HTTP_RESPONSE FINDING iis_shortnames scan No Check for IIS shortname vulnerability active, iis-shortnames, safe, web-basic, web-thorough URL URL_HINT masscan scan No Port scan IP subnets with masscan active, aggressive, portscan SCAN OPEN_TCP_PORT naabu scan No Execute port scans with naabu active, aggressive, portscan, web-thorough DNS_NAME, IP_ADDRESS OPEN_TCP_PORT nmap scan No Execute port scans with nmap active, aggressive, portscan, web-thorough DNS_NAME, IP_ADDRESS OPEN_TCP_PORT ntlm scan No Watch for HTTP endpoints that support NTLM authentication active, safe, web-basic, web-thorough HTTP_RESPONSE, URL DNS_NAME, FINDING nuclei scan No Fast and customisable vulnerability scanner active, aggressive, deadly URL FINDING, VULNERABILITY paramminer_cookies scan No Smart brute-force to check for common HTTP cookie parameters active, aggressive, slow, web-paramminer URL FINDING paramminer_getparams scan No Use smart brute-force to check for common HTTP GET parameters active, aggressive, slow, web-paramminer URL FINDING paramminer_headers scan No Use smart brute-force to check for common HTTP header parameters active, aggressive, slow, web-paramminer URL FINDING robots scan No Look for and parse robots.txt active, safe, web-basic, web-thorough URL URL_UNVERIFIED secretsdb scan No Detect common secrets with secrets-patterns-db active, safe, web-basic, web-thorough HTTP_RESPONSE FINDING smuggler scan No Check for HTTP smuggling active, aggressive, slow, web-thorough URL FINDING social scan No Look for social media links in webpages active, safe, social-enum URL_UNVERIFIED SOCIAL sslcert scan No Visit open ports and retrieve SSL certificates active, affiliates, email-enum, safe, subdomain-enum, web-basic, web-thorough OPEN_TCP_PORT DNS_NAME, EMAIL_ADDRESS subdomain_hijack scan No Detect hijackable subdomains active, cloud-enum, safe, subdomain-enum, subdomain-hijack, web-basic, web-thorough DNS_NAME, DNS_NAME_UNRESOLVED FINDING telerik scan No Scan for critical Telerik vulnerabilities active, aggressive, slow, web-thorough URL FINDING, VULNERABILITY url_manipulation scan No Attempt to identify URL parsing/routing based vulnerabilities active, aggressive, web-thorough URL FINDING vhost scan No Fuzz for virtual hosts active, aggressive, deadly, slow URL DNS_NAME, VHOST wafw00f scan No Web Application Firewall Fingerprinting Tool active, aggressive URL WAF wappalyzer scan No Extract technologies from web responses active, safe, web-basic, web-thorough HTTP_RESPONSE TECHNOLOGY affiliates scan No Summarize affiliate domains at the end of a scan affiliates, passive, report, safe * anubisdb scan No Query jldc.me's database for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME asn scan No Query ripe and bgpview.io for ASNs passive, report, safe, subdomain-enum IP_ADDRESS ASN azure_tenant scan No Query Azure for tenant sister domains affiliates, passive, safe, subdomain-enum DNS_NAME DNS_NAME bevigil scan Yes Retrieve OSINT data from mobile applications using BeVigil passive, safe, subdomain-enum DNS_NAME DNS_NAME, URL_UNVERIFIED binaryedge scan Yes Query the BinaryEdge API passive, safe, subdomain-enum DNS_NAME DNS_NAME builtwith scan Yes Query Builtwith.com for subdomains affiliates, passive, safe, subdomain-enum DNS_NAME DNS_NAME c99 scan Yes Query the C99 API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME censys scan Yes Query the Censys API email-enum, passive, safe, subdomain-enum DNS_NAME DNS_NAME, EMAIL_ADDRESS, IP_ADDRESS, OPEN_PORT, PROTOCOL certspotter scan No Query Certspotter's API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME columbus scan No Query the Columbus Project API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME crobat scan No Query Project Crobat for subdomains passive, safe DNS_NAME DNS_NAME crt scan No Query crt.sh (certificate transparency) for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME dnscommonsrv scan No Check for common SRV records passive, safe, subdomain-enum DNS_NAME DNS_NAME dnsdumpster scan No Query dnsdumpster for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME emailformat scan No Query email-format.com for email addresses email-enum, passive, safe DNS_NAME EMAIL_ADDRESS fullhunt scan Yes Query the fullhunt.io API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME github scan Yes Query Github's API for related repositories passive, safe, subdomain-enum DNS_NAME URL_UNVERIFIED hackertarget scan No Query the hackertarget.com API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME hunterio scan Yes Query hunter.io for emails email-enum, passive, safe, subdomain-enum DNS_NAME DNS_NAME, EMAIL_ADDRESS, URL_UNVERIFIED ipneighbor scan No Look beside IPs in their surrounding subnet aggressive, passive, subdomain-enum IP_ADDRESS IP_ADDRESS ipstack scan Yes Query IPStack's API for GeoIP passive, safe IP_ADDRESS GEOLOCATION leakix scan No Query leakix.net for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME massdns scan No Brute-force subdomains with massdns (highly effective) aggressive, passive, slow, subdomain-enum DNS_NAME DNS_NAME otx scan No Query otx.alienvault.com for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME passivetotal scan Yes Query the PassiveTotal API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME pgp scan No Query common PGP servers for email addresses email-enum, passive, safe DNS_NAME EMAIL_ADDRESS rapiddns scan No Query rapiddns.io for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME riddler scan No Query riddler.io for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME securitytrails scan Yes Query the SecurityTrails API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME shodan_dns scan Yes Query Shodan for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME skymem scan No Query skymem.info for email addresses email-enum, passive, safe DNS_NAME EMAIL_ADDRESS sublist3r scan No Query sublist3r's API for subdomains passive, safe DNS_NAME DNS_NAME threatminer scan No Query threatminer's API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME urlscan scan No Query urlscan.io for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME, URL_UNVERIFIED viewdns scan No Query viewdns.info's reverse whois for related domains affiliates, passive, safe DNS_NAME DNS_NAME virustotal scan Yes Query VirusTotal's API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME wayback scan No Query archive.org's API for subdomains passive, safe, subdomain-enum DNS_NAME DNS_NAME, URL_UNVERIFIED zoomeye scan Yes Query ZoomEye's API for subdomains affiliates, passive, safe, subdomain-enum DNS_NAME DNS_NAME asset_inventory output No Output to an asset inventory style flattened CSV file DNS_NAME, FINDING, IP_ADDRESS, OPEN_TCP_PORT, TECHNOLOGY, URL, VULNERABILITY IP_ADDRESS, OPEN_TCP_PORT csv output No Output to CSV * http output No Send every event to a custom URL via a web request * human output No Output to text * json output No Output to JSON * neo4j output No Output to Neo4j * python output No Output via Python API * web_report output No Create a markdown report with web assets FINDING, TECHNOLOGY, URL, VHOST, VULNERABILITY websocket output No Output to websockets * aggregate internal No Summarize statistics at the end of a scan passive, safe excavate internal No Passively extract juicy tidbits from scan data passive HTTP_RESPONSE URL_UNVERIFIED speculate internal No Derive certain event types from others by common sense passive DNS_NAME, DNS_NAME_UNRESOLVED, HTTP_RESPONSE, IP_ADDRESS, IP_RANGE, STORAGE_BUCKET, URL, URL_UNVERIFIED DNS_NAME, FINDING, IP_ADDRESS, OPEN_TCP_PORT <p>For a list of module config options, see Module Options.</p>"},{"location":"scanning/output/","title":"Output","text":"<p>By default, BBOT saves its output in TXT, JSON, and CSV formats: </p> <p>Every BBOT scan gets a unique and mildly-entertaining name like <code>demonic_jimmy</code>. Output for that scan, including scan stats and any web screenshots, etc., are saved to a folder by that name in <code>~/.bbot/scans</code>. The most recent 20 scans are kept, and older ones are removed. You can change the location of BBOT's output with <code>--output</code>, and you can also pick a custom scan name with <code>--name</code>.</p> <p>If you reuse a scan name, it will append to its original output files and leverage the previous.</p>"},{"location":"scanning/output/#output-modules","title":"Output Modules","text":"<p>Multiple simultaneous output formats are possible because of output modules. Output modules are similar to normal modules except they are enabled with <code>-om</code>.</p>"},{"location":"scanning/output/#human","title":"Human","text":"<p><code>human</code> output is tab-delimited, so it's easy to grep:</p> <pre><code># grep out only the DNS_NAMEs\ncat ~/.bbot/scans/extreme_johnny/output.txt | grep '[DNS_NAME]' | cut -f2\nevilcorp.com\nwww.evilcorp.com\nmail.evilcorp.com\n</code></pre>"},{"location":"scanning/output/#csv","title":"CSV","text":"<p>The <code>csv</code> output module produces a CSV like this:</p> Event type Event data IP Address Source Module Scope Distance Event Tags DNS_NAME evilcorp.com 1.2.3.4 TARGET 0 a-record,cdn-github,distance-0,domain,in-scope,mx-record,ns-record,resolved,soa-record,target,txt-record DNS_NAME www.evilcorp.com 2.3.4.5 certspotter 0 a-record,aaaa-record,cdn-github,cname-record,distance-0,in-scope,resolved,subdomain URL http://www.evilcorp.com 2.3.4.5 httpx 0 a-record,aaaa-record,cdn-github,cname-record,distance-0,in-scope,resolved,subdomain DNS_NAME admin.evilcorp.com 5.6.7.8 otx 0 a-record,aaaa-record,cloud-azure,cname-record,distance-0,in-scope,resolved,subdomain"},{"location":"scanning/output/#json","title":"JSON","text":"<p>If you manually enable the <code>json</code> output module, it will go to stdout:</p> <pre><code>bbot -t evilcorp.com -om json | jq\n</code></pre> <p>You will then see events like this:</p> <pre><code>{\n\"type\": \"IP_ADDRESS\",\n\"id\": \"IP_ADDRESS:13cd09c2adf0860a582240229cd7ad1dccdb5eb1\",\n\"data\": \"1.2.3.4\",\n\"scope_distance\": 1,\n\"scan\": \"SCAN:64c0e076516ae7aa6502fd99489693d0d5ec26cc\",\n\"timestamp\": 1688518967.740472,\n\"resolved_hosts\": [\"1.2.3.4\"],\n\"source\": \"DNS_NAME:2da045542abbf86723f22383d04eb453e573723c\",\n\"tags\": [\"distance-1\", \"ipv4\", \"internal\"],\n\"module\": \"A\",\n\"module_sequence\": \"A\"\n}\n</code></pre> <p>You can filter on the JSON output with <code>jq</code>:</p> <pre><code># pull out only the .data attribute of every DNS_NAME\n$ jq -r 'select(.type==\"DNS_NAME\") | .data' ~/.bbot/scans/extreme_johnny/output.json\nevilcorp.com\nwww.evilcorp.com\nmail.evilcorp.com\n</code></pre>"},{"location":"scanning/output/#http","title":"HTTP","text":"<p>The <code>http</code> output module sends events in JSON format to a desired HTTP endpoint.</p> <pre><code># POST scan results to localhost\nbbot -t evilcorp.com -om http -c output_modules.http.url=http://localhost:8000\n</code></pre> <p>You can customize the HTTP method if needed. Authentication is also supported:</p> ~/.bbot/config/bbot.yml<pre><code>output_modules:\nhttp:\nurl: https://localhost:8000\nmethod: PUT\n# Authorization: Bearer\nbearer: &lt;bearer_token&gt;\n# OR\nusername: bob\npassword: P@ssw0rd\n</code></pre>"},{"location":"scanning/output/#asset-inventory","title":"Asset Inventory","text":"<p>The <code>asset_inventory</code> module produces a CSV like this:</p> Host Provider IP(s) Status Open Ports evilcorp.com cdn-github 1.2.3.4 Active 80,443 www.evilcorp.com cdn-github 2.3.4.5 Active 22,80,443 admin.evilcorp.com cloud-azure 5.6.7.8 N/A"},{"location":"scanning/output/#neo4j","title":"Neo4j","text":"<p>Neo4j is the funnest (and prettiest) way to view and interact with BBOT data.</p> <p></p> <ul> <li>You can get Neo4j up and running with a single docker command:</li> </ul> <pre><code># start Neo4j in the background with docker\ndocker run -d -p 7687:7687 -p 7474:7474 -v \"$(pwd)/neo4j/:/data/\" -e NEO4J_AUTH=neo4j/bbotislife neo4j\n</code></pre> <ul> <li>After that, run bbot with <code>-om neo4j</code></li> </ul> <pre><code>bbot -f subdomain-enum -t evilcorp.com -om neo4j\n</code></pre> <ul> <li>Browse data at http://localhost:7474</li> </ul>"},{"location":"scanning/tips_and_tricks/","title":"Tips and Tricks","text":"<p>Below are some helpful tricks to help you in your adventures.</p>"},{"location":"scanning/tips_and_tricks/#change-verbosity-during-scan","title":"Change Verbosity During Scan","text":"<p>Press enter during a BBOT scan to change the log level. This will allow you to see debugging messages, etc.</p> <p></p>"},{"location":"scanning/tips_and_tricks/#common-config-changes","title":"Common Config Changes","text":""},{"location":"scanning/tips_and_tricks/#web-spider","title":"Web Spider","text":"<p>The web spider is great for finding juicy data like subdomains, email addresses, and javascript secrets buried in webpages. However since it can lengthen the duration of a scan, it's disabled by default. To enable the web spider, you must increase the value of <code>web_spider_distance</code>.</p> <p>The web spider is controlled with three config values:</p> <ul> <li><code>web_spider_distance</code> (<code>0</code> == all spidering disabled, default: <code>0</code>): the maximum number of links that can be followed in a row. This is designed to limit the spider in cases where <code>web_spider_depth</code> fails (e.g. for an ecommerce website with thousands of base-level URLs).</li> <li><code>web_spider_depth</code> (default: <code>1</code>: the maximum directory depth allowed. This is to prevent the spider from delving too deep into a website.</li> <li><code>web_spider_links_per_page</code> (default: <code>25</code>): the maximum number of links per page that can be followed. This is designed specifically for cases where a single page has hundreds or thousands of links.</li> </ul> <p>Here is a typical example:</p> spider.yml<pre><code>web_spider_depth: 2\nweb_spider_distance: 2\nweb_spider_links_per_page: 25\n</code></pre> <pre><code># run the web spider against www.evilcorp.com\nbbot -t www.evilcorp.com -m httpx -c spider.yml\n</code></pre> <p>You can also pair the web spider with subdomain enumeration:</p> <pre><code># spider every subdomain of evilcorp.com\nbbot -t evilcorp.com -f subdomain-enum -c spider.yml\n</code></pre>"},{"location":"scanning/tips_and_tricks/#custom-http-proxy","title":"Custom HTTP Proxy","text":"<p>Web pentesters may appreciate BBOT's ability to quickly populate Burp Suite site maps for all subdomains in a target. If your scan includes gowitness, this will capture the traffic as if you manually visited each website in your browser -- including auxiliary web resources and javascript API calls. To accomplish this, set the <code>http_proxy</code> config option like so:</p> <pre><code># enumerate subdomains, take web screenshots, proxy through Burp\nbbot -t evilcorp.com -f subdomain-enum -m gowitness -c http_proxy=http://127.0.0.1:8080\n</code></pre>"},{"location":"scanning/tips_and_tricks/#display-http_response-events","title":"Display <code>HTTP_RESPONSE</code> Events","text":"<p>BBOT's <code>httpx</code> module emits <code>HTTP_RESPONSE</code> events, but by default they're hidden from output. These events contain the full raw HTTP body along with headers, etc. If you want to see them, you can modify <code>omit_event_types</code> in the config:</p> ~/.bbot/config/bbot.yml<pre><code>omit_event_types:\n- URL_UNVERIFIED\n# - HTTP_RESPONSE\n</code></pre>"},{"location":"scanning/tips_and_tricks/#display-out-of-scope-events","title":"Display Out-of-scope Events","text":"<p>By default, BBOT only shows in-scope events (with a few exceptions for things like storage buckets). If you want to see events that BBOT is emitting internally (such as for DNS resolution, etc.), you can increase <code>scope_report_distance</code> in the config or on the command line like so: <pre><code># display events up to scope distance 2 (default == 0)\nbbot -f subdomain-enum -t evilcorp.com -c scope_report_distance=2\n</code></pre></p>"},{"location":"scanning/tips_and_tricks/#speed-up-scans-by-disabling-dns-resolution","title":"Speed Up Scans By Disabling DNS Resolution","text":"<p>If you already have a list of discovered targets (e.g. URLs), you can speed up the scan by skipping BBOT's DNS resolution. You can do this by setting <code>dns_resolution</code> to <code>false</code>. <pre><code># disable the creation of new events from DNS resoluion\nbbot -m httpx gowitness wappalyzer -t urls.txt -c dns_resolution=false\n</code></pre></p>"},{"location":"scanning/tips_and_tricks/#faq","title":"FAQ","text":""},{"location":"scanning/tips_and_tricks/#what-is-url_unverified","title":"What is <code>URL_UNVERIFIED</code>?","text":"<p><code>URL_UNVERIFIED</code> events are URLs that haven't yet been visited by <code>httpx</code>. Once <code>httpx</code> visits them, it reraises them as <code>URL</code>s, tagged with their resulting status code.</p> <p>For example, when <code>excavate</code> gets an <code>HTTP_RESPONSE</code> event, it extracts links from the raw HTTP response as <code>URL_UNVERIFIED</code>s and then passes them back to <code>httpx</code> to be visited.</p> <p>By default, <code>URL_UNVERIFIED</code>s are hidden from output. If you want to see all of them including the out-of-scope ones, you can do it by changing <code>omit_event_types</code> and <code>scope_report_distance</code> in the config like so:</p> <pre><code># visit www.evilcorp.com and extract all the links\nbbot -t www.evilcorp.com -m httpx -c omit_event_types=[] scope_report_distance=2\n</code></pre>"}]}